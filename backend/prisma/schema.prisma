// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  orders    Order[]
  reviews   Review[]
  createdAt DateTime @default(now())
}

model Furniture {
  id         Int      @id @default(autoincrement())
  name       String
  description String?
  price      Float
  imageUrl   String?
  length     Float?   // in cm
  width      Float?
  height     Float?
  category   String?
  reviews    Review[]
  orderItems OrderItem[]
  createdAt  DateTime @default(now())
}

model Order {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  total      Float
  status     OrderStatus @default(PLACED)
  items      OrderItem[]
  createdAt  DateTime @default(now())
}

model OrderItem {
  id           Int       @id @default(autoincrement())
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      Int
  furniture    Furniture @relation(fields: [furnitureId], references: [id])
  furnitureId  Int
  quantity     Int       @default(1)
  price        Float     // price per item at order time
}

model Review {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  furniture   Furniture @relation(fields: [furnitureId], references: [id])
  furnitureId Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

enum OrderStatus {
  PLACED
  SHIPPED
  DELIVERED
  CANCELED
}